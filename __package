#!/bin/bash

# bespoke remote-resources packaging for a-pre-program-for-graphic-design.epub
# takes compressed .epub (as generated by indesign)
# unzips to make package.epub
# then finds and replaces to insert corrected video tags
# and correct refs to video and audio in content.opf
# outputs package.epub 
        
# sed -i (edit in place) requires .bak in bash
# also requires double quotes for substitution when includng variables
# for correct expansion and double escaping of newline character
# is necc for sed substitition multiple lines, add, or insert syntax
# sed s = substitute, sed a = add, sed i = insert
# sed s delimiter can be any character that follows s
# $1 = positional parameter (argument) 

# init 

REMOTE="https\:\/\/a-pre-program-for-graphic-design.org\/media"
# REMOTE="http\:\/\/a-pre-program-for-graphic-design.local\/media\/"
REMOTE_SUB="small"
# REMOTE_SUB="large"

DIR=$(pwd)
EPUB=$1
if [[ $EPUB == *.epub ]]
then
    shift
fi

# parse command line options

while [ "$1" != "" ]; do
    case $1 in
        -a | --audio_only )     shift
                                AUDIO_ONLY=true;;
        -d | --dryrun )         shift
                                DRYRUN=true;;
        -p | --poster_replace ) shift
                                POSTER_REPLACE=true;;
        -v | --version )        shift
                                VERSION_WHATS_NEW=$1
                                shift
                                VERSION=true;;
        -h | --help )           echo -e "\
Usage: ./__package [FILE]... [OPTIONS]... 

Remote-resources packaging a-pre-program-for-graphic-design.epub

  Takes compressed .epub (generated by indesign)
  Unzips to make package.epub
  Inserts corrected video tags
  Corrects refs in content.opf
  Outputs package.epub

  -a, --audio_only              output audio only for apple books store
  -d, --dryrun                  use existing proof.epub, output package.epub
  -p, --poster_replace          add or replace video poster img with _dots.gif 
  -v, --version                 add <version_whats_new>, output version.epub
                                followed by string like "1.0 This is what is new ..."
  -h, --help                    show help
"
                                exit;;
    esac
done

# cleanup

PACKAGE=package
PACKAGE_BASEPATH=$PACKAGE.epub/OEBPS
rm -r $PACKAGE.epub
rm -r version.epub

# unzip

if [[ $DRYRUN ]]
then
    cp -r proof.epub $PACKAGE.epub
    wait
    echo "package.epub ready"
else
    echo "compressed .epub --> $EPUB"
    echo "unzip --> $PACKAGE.epub"
    mkdir $PACKAGE
    unzip -q "$EPUB" -d "$DIR/$PACKAGE"
    mv $PACKAGE $PACKAGE.epub
    wait
    echo "package.epub ready"
fi

ls $PACKAGE_BASEPATH

for f in $PACKAGE_BASEPATH/*.xhtml
do
    FILEIN=$f
    if [[ $DRYRUN ]] 
    then
        # grep | sed | sed (returns format 'I-1.mp4')
        # use $REMOTE/.*/$REMOTE_SUB (.* = $HASH)
        VIDEO_FILENAME=$(grep ".*-.*\.mp4" $FILEIN | sed "s:^.*src=\"$REMOTE/.*/$REMOTE_SUB/::" | sed "s:\" type.*::")
    else 
        # grep | sed | sed (returns format 'I-1.mp4')
        VIDEO_FILENAME=$(grep '.*-.*\.mp4' $FILEIN | sed 's:^.*src="video/::' | sed 's:" type.*::')
    fi

    if [[ $VIDEO_FILENAME ]]    # [[ ]] wraps condition in quotes
    then

        # 0. set basenames

        VIDEO_BASENAME=${VIDEO_FILENAME%.*}
        FILEIN_BASENAME=${FILEIN##*/}
        FILEIN_BASENAME=${FILEIN_BASENAME%.*}

        # 1. cp resources

        if [[ $POSTER_REPLACE ]]
        then
            cp ../video/gif/_dots.gif $PACKAGE_BASEPATH/image/_dots.gif
        fi
        cp ../video/audio/$VIDEO_BASENAME.m4a $PACKAGE_BASEPATH/video/$VIDEO_BASENAME.m4a            
        rm $PACKAGE_BASEPATH/video/$VIDEO_BASENAME.mp4

        # 2. edit .xhthml

        if [[ $POSTER_REPLACE ]]
        then
            if [[ $AUDIO_ONLY ]]
            then
                # add poster, preload
                sed -i.bak "s/controls=\"controls\">/poster=\"image\/_dots.gif\" preload=\"auto\" controls=\"controls\">/" $FILEIN        
            else                    
                # replace poster, add preload
                sed -i.bak "s/poster=.*/poster=\"image\/_dots.gif\" preload=\"auto\" controls=\"controls\">/" $FILEIN
            fi
        else
            # add preload only
            sed -i.bak "s/controls=\"controls\">/controls=\"controls\" preload=\"auto\">/" $FILEIN
        fi

        if [[ ! $AUDIO_ONLY ]]
        then
            # generate nginx http_secure_link_module hash for remote video
            HASH=`echo -n "$REMOTE_SUB/$VIDEO_BASENAME.mp4sauce" | openssl md5 -hex`
    
            # update source, add fallbacks (: = delimiter, tabs for spacing)
            sed -i.bak "s:<source src=\"video/$VIDEO_BASENAME.mp4\" type=\"video/mp4\" />:<source src=\"$REMOTE/$HASH/$REMOTE_SUB/$VIDEO_BASENAME.mp4\" type=\"video/mp4\" /> \\
                        <source src=\"video/$VIDEO_BASENAME.m4a\" type=\"audio/mp4\" /> \\
                        Sorry, your e-reader does not support multimedia content.:" $FILEIN    
        else
            # update source to audio only, add fallbacks (: = delimiter, tabs for spacing)
            sed -i.bak "s:<source src=\"video/$VIDEO_BASENAME.mp4\" type=\"video/mp4\" />:<source src=\"video/$VIDEO_BASENAME.m4a\" type=\"audio/mp4\" /> \\
                        Sorry, your e-reader does not support multimedia content.:" $FILEIN
        fi

        # 3. edit .opf

        if [[ ! $AUDIO_ONLY ]]
        then
            # add property remote-resources
            sed -i.bak "s/<item id=\"$FILEIN_BASENAME\" href=\"$FILEIN_BASENAME.xhtml\" media-type=\"application\/xhtml+xml\" \/>/<item id=\"$FILEIN_BASENAME\" href=\"$FILEIN_BASENAME.xhtml\" media-type=\"application\/xhtml+xml\" properties=\"remote-resources\" \/>/" $PACKAGE_BASEPATH/content.opf

            # update resources, remote and local
            sed -i.bak "s/<item id=\"$VIDEO_BASENAME.mp4\" href=\"video\/$VIDEO_BASENAME.mp4\" media-type=\"video\/mp4\" \/>/<item id=\"$VIDEO_BASENAME.mp4\" href=\"$REMOTE\/$HASH\/$REMOTE_SUB\/$VIDEO_BASENAME.mp4\" media-type=\"video\/mp4\" \/> \\
            <item id=\"$VIDEO_BASENAME.m4a\" href=\"video\/$VIDEO_BASENAME.m4a\" media-type=\"audio\/mp4\" \/>/" $PACKAGE_BASEPATH/content.opf
        else
            # update resources, remote and local
            sed -i.bak "s/<item id=\"$VIDEO_BASENAME.mp4\" href=\"video\/$VIDEO_BASENAME.mp4\" media-type=\"video\/mp4\" \/>/<item id=\"$VIDEO_BASENAME.m4a\" href=\"video\/$VIDEO_BASENAME.m4a\" media-type=\"audio\/mp4\" \/> \\
            /" $PACKAGE_BASEPATH/content.opf
        fi
    fi
done

# add _dots.gif (note sed BSD syntax)

if [[ $POSTER_REPLACE ]]
then
    sed -i.bak "/<item id=\"toc\"/a\\ 
    \ \ \ \ \ \ \ \ <item id=\"_dots.gif\" href=\"image/_dots.gif\" media-type=\"image/gif\" />\\
    " $PACKAGE_BASEPATH/content.opf
fi

# clean up *.bak
rm -r $PACKAGE_BASEPATH/*.bak

# ls .epub contents
ls -R $PACKAGE.epub/

wait

if [[ $VERSION ]]
then

    # validate and output version.epub
    # echo "** version **"
    # ./__validate $PACKAGE.epub -v "$VERSION_WHATS_NEW"
    # wait
    # echo "** version.epub output **"

    echo "** VERSIONING CURRENTLY NOT IMPLEMENTED **"

fi

wait
echo "** package finished**"
echo "done."
exit
